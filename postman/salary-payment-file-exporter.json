{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
    "name": "Salary Payment API",
    "description": "A collection to test the validation rules for the Salary Payment File Exporter API.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Success Case",
      "item": [
        {
          "name": "[Success] Create Payments with Valid Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"payment\": {\n        \"company_id\": 1,\n        \"payments\": [\n            {\n                \"employee_id\": \"E-{{$randomInt}}\",\n                \"bank_bsb\": \"062000\",\n                \"bank_account\": \"12345678\",\n                \"amount_cents\": 50000,\n                \"currency\": \"AUD\",\n                \"pay_date\": \"{{$isoTimestamp}}\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response body is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Payments created successfully.\");",
                  "    pm.expect(jsonData.count).to.eql(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Validation Failures",
      "item": [
        {
          "name": "[Validation] Fails when amount_cents is zero",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"payment\": {\n        \"company_id\": 1,\n        \"payments\": [\n            {\n                \"employee_id\": \"E-{{$randomInt}}\",\n                \"bank_bsb\": \"062000\",\n                \"bank_account\": \"12345678\",\n                \"amount_cents\": 0,\n                \"currency\": \"AUD\",\n                \"pay_date\": \"{{$isoTimestamp}}\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.include(\"Amount cents must be greater than 0\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "[Validation] Fails when BSB is too short",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"payment\": {\n        \"company_id\": 1,\n        \"payments\": [\n            {\n                \"employee_id\": \"E-{{$randomInt}}\",\n                \"bank_bsb\": \"06200\",\n                \"bank_account\": \"12345678\",\n                \"amount_cents\": 50000,\n                \"currency\": \"AUD\",\n                \"pay_date\": \"{{$isoTimestamp}}\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.include(\"Bank bsb must be 6 digits\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "[Validation] Fails when Account Number is too long",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"payment\": {\n        \"company_id\": 1,\n        \"payments\": [\n            {\n                \"employee_id\": \"E-{{$randomInt}}\",\n                \"bank_bsb\": \"062000\",\n                \"bank_account\": \"1234567890\",\n                \"amount_cents\": 50000,\n                \"currency\": \"AUD\",\n                \"pay_date\": \"{{$isoTimestamp}}\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.include(\"Bank account must be 6-9 digits\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "[Validation] Fails when Currency is not AUD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"payment\": {\n        \"company_id\": 1,\n        \"payments\": [\n            {\n                \"employee_id\": \"E-{{$randomInt}}\",\n                \"bank_bsb\": \"062000\",\n                \"bank_account\": \"12345678\",\n                \"amount_cents\": 50000,\n                \"currency\": \"USD\",\n                \"pay_date\": \"{{$isoTimestamp}}\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.include(\"Currency must be 'AUD'\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "[Validation] Fails when Pay Date is in the past",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script requires Moment.js, which is available in the Postman sandbox.",
                  "const moment = require('moment');",
                  "",
                  "// Get yesterday's date in YYYY-MM-DD format",
                  "const yesterday = moment().subtract(1, 'days').format('YYYY-MM-DD');",
                  "",
                  "// Set it as a collection variable to use in the request body",
                  "pm.collectionVariables.set(\"yesterday_date\", yesterday);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.include(\"Pay date can't be in the past\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"payment\": {\n        \"company_id\": 1,\n        \"payments\": [\n            {\n                \"employee_id\": \"E-{{$randomInt}}\",\n                \"bank_bsb\": \"062000\",\n                \"bank_account\": \"12345678\",\n                \"amount_cents\": 50000,\n                \"currency\": \"AUD\",\n                \"pay_date\": \"{{yesterday_date}}\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "[Validation] Fails when Company ID is not found",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"payment\": {\n        \"company_id\": 9999,\n        \"payments\": [\n            {\n                \"employee_id\": \"E-{{$randomInt}}\",\n                \"bank_bsb\": \"062000\",\n                \"bank_account\": \"12345678\",\n                \"amount_cents\": 50000,\n                \"currency\": \"AUD\",\n                \"pay_date\": \"{{$isoTimestamp}}\"\n            }\n        ]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(\"Company not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    }
  ]
}